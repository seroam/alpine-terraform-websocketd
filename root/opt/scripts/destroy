#!/bin/bash

if [ -e /terraform/no-content ]; then
    echo "=========================="
    echo "executing /opt/scripts/destroy"
    echo "No content found."
    exit 0
fi

source /terraform/.deploy
source /terraform/.destroy
source /terraform/proxy.env

cd /terraform/

resource_group_name=`grep -re "^resource \"azurerm_resource_group\"" *.tf | awk -F"\"" '{print $4}'`
if [ $? -eq 0 ]; then
    echo "$(date): Resource group variable name is '$resource_group_name'." >> /terraform/logs/terraform-destroy.log
else
    echo "$(date): Unable to determine resource group variable name" >> /terraform/logs/terraform-destroy.log
    echo "$(date): Unable to determine resource group variable name"
fi

case "$DEPLOYED" in
init)
    echo "$(date): terraform deploy not yet started" >>/terraform/logs/terraform-destroy.log
    echo "$(date): terraform deploy not yet started"
    if [ -e /terraform/plan.fail ]; then
        echo "$(date): Failed to create terraform plan."
        echo "$(date): Opening plan log"
        sleep 2
        cat /terraform/logs/terraform-plan.log
        exit 1
    else
        echo "$(date): if you want to deploy, click on \"Run Task\" in the Deploy menu"
    fi
    ;;

deploying)
    ps -ef | grep "/usr/bin/terraform apply" | grep -v grep >/dev/null
    RESULT=$?
    if [ $RESULT -eq 0 ]; then
        echo "$(date): terraform apply is running" >>/terraform/logs/terraform-destroy.log
        echo "$(date): terraform apply is running"
        cat /tmp/start-date.log
        echo "$(date): if you destroy now, the deployment will be cancelled."
        echo "$(date): click on \"Run Task\" in the Log menu to see the deploy log"
    else
        echo "$(date): terraform apply not running - deployment should have been finished - let's check ..." >>/terraform/logs/terraform-destroy.log
        echo "$(date): terraform apply not running - deployment should have been finished - let's check ..."

        terraform state show "azurerm_resource_group.$resource_group_name" >>/terraform/logs/terraform-destroy.log
        R1=$?
        if [ $R1 -eq 0 ]; then
            echo "$(date): deploy was successful: infrastructure running" >>/terraform/logs/terraform-destroy.log
            echo "$(date): deploy was successful: infrastructure running"
            echo "DEPLOYED=\"finished\"" >/terraform/.deploy

            if [ -e /terraform/terraform.end ]; then
                /opt/scripts/show-when-cron-will-destroy-infrastructure
            fi

        else
            echo "$(date): deploy error: infrastructure not running" >>/terraform/logs/terraform-destroy.log
            echo "$(date): deploy error: infrastructure not running"
        fi

    fi

    ;;

finished)
    case "$DESTROYED" in
    init)
        echo "$(date): terraform is fully deployed" >>/terraform/logs/terraform-destroy.log
        echo "$(date): terraform is fully deployed"
        echo "$(date): user did not click on destroy" >>/terraform/logs/terraform-destroy.log
        echo "$(date): user did not click on destroy"

        echo "====== Azure Resource Group ====="
        terraform state show "azurerm_resource_group.$resource_group_name" | grep id | cut -d'/' -f5- | cut -d '"' -f1

        if [ -e /terraform/terraform.end ]; then
            /opt/scripts/show-when-cron-will-destroy-infrastructure
        fi

        echo "================================="
        echo "$(date): click on \"Run Task\" in the Ip Addresses menu to get the login credentials"
        echo "================================="

        ;;

    running)
        ps -ef | grep "/usr/bin/terraform destroy" | grep -v grep >/dev/null
        RESULT=$?
        if [ $RESULT -eq 0 ]; then
            echo "$(date): user clicked on the destroy button" >>/terraform/logs/terraform-destroy.log
            echo "$(date): user clicked on the destroy button"
            echo "$(date): terraform destroy has started" >>/terraform/logs/terraform-destroy.log
            echo "$(date): terraform destroy has started"
        else
            echo "$(date): user clicked on the destroy button" >>/terraform/logs/terraform-destroy.log
            echo "$(date): user clicked on the destroy button"

            terraform state show "azurerm_resource_group.$resource_group_name" >>/terraform/logs/terraform-destroy.log
            R1=$?
            if [ $R1 -eq 0 ]; then
                echo "$(date): destroy not finished yet: infrastructure still destroying" >>/terraform/logs/terraform-destroy.log
                echo "$(date): destroy not finished yet: infrastructure still destroying"
                echo "$(date): click on \"Run Task\" in the Log menu to see the destroy log"
            else
                echo "$(date): infrastructure is fully down" >>/terraform/logs/terraform-destroy.log
                echo "$(date): infrastructure is fully down"
                echo "DESTROYED=\"finished\"" >/terraform/.destroy
                echo "DEPLOYED=\"init\"" >/terraform/.deploy
            fi

        fi
        ;;

    finished)
        echo "$(date): destroy successfully finished - will reset deployment to init" >>/terraform/logs/terraform-destroy.log
        echo "$(date): destroy successfully finished - will reset deployment to init"
        echo "DEPLOYED=\"init\"" >/terraform/.deploy
        echo "DESTROYED=\"init\"" >/terraform/.destroy
        ;;
    *)
        exit 1
        ;;
    esac
    ;;

*)
    exit 1
    ;;

esac
